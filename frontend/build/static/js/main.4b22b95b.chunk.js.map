{"version":3,"sources":["components/API.js","rbac-rules.js","components/Can.js","components/ListDestinations.js","components/SelectCountry.js","components/CovidCaseData.js","components/CountryPage.js","components/LoginButton.js","components/LoginPage.js","components/UserPage.js","components/ListCountries.js","App.js","serviceWorker.js","index.js"],"names":["fetchUserRole","token","user_id","a","fetch","headers","Accept","Authorization","response","json","responseData","console","log","message","fetchDailyCasesByCountry","country","text","result","data","JSON","parse","addUserCountryPreference","user","countryId","method","body","stringify","sub","name","email","fetchCountryOfUser","fetchDestinations","fetchCountries","fetchCountryInfo","addDestination","destinationId","id","deleteDestination","rules","visitor","static","admin","Can","props","role","action","permissions","staticPermissions","includes","dynamicPermissions","dynamic","permissionCondition","check","perform","yes","no","defaultProps","ListDestinations","showDeleteButton","onDelete","useContext","AppStateContext","userRole","destinations","length","className","map","key","alias","style","backgroundImage","toLowerCase","to","onClick","SelectCountry","onSubmit","useAuth0","isAuthenticated","getAccessTokenSilently","setCountryId","selectedCountryId","setSelectedCountryId","useState","countries","setCountries","isSubmitted","setIsSubmitted","useEffect","getData","handleOnSubmit","event","preventDefault","new_user","value","onChange","target","type","CovidCaseData","newConfirmed","setNewConfirmed","newDeaths","setNewDeaths","newRecovered","setNewRecovered","isLoaded","setIsLoaded","arr","Countries","filter","d","CountryCode","NewConfirmed","NewDeaths","NewRecovered","getCOVIDInfo","CountryPage","destination_id","useParams","setDestinations","setCountry","handleOnDeleteDestination","addDestinationToCountry","getCountryData","LoginButton","loginWithRedirect","LoginPage","UserPage","gotDestinationsData","setGotDestinationsData","country_id","getUserCountryPreference","getDestinations","ListCountries","query","setQuery","showingCountries","c","placeholder","trim","updateQuery","createContext","App","setUserRole","getUserRole","Provider","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","domain","process","clientId","redirectUri","origin","audience","callbackUrl","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4b22b95b.chunk.js","sourcesContent":["\nexport const fetchUserRole = async (token, user_id) => {\n\n    try {\n        const response = await fetch(`/users/${user_id}/role`, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n};\n\nexport const fetchDailyCasesByCountry = async (country) => {\n\n    try {\n        const response = await fetch(`https://api.covid19api.com/summary`, {\n            headers: {\n            },\n        });\n        const result = await response.text();\n        const data = JSON.parse(result)\n        return data\n\n    } catch (error) {\n      console.log(error.message);\n    }\n};\n\nexport const addUserCountryPreference = async (token, user, countryId) => {\n\n    try{\n        const response = await fetch(`/users/add`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({'userId': user.sub, 'name': user.name, 'email': user.email, 'countryId':countryId})\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n}\n\nexport const fetchCountryOfUser = async (token, user_id) => {\n    try {\n        const response = await fetch(`users/${user_id}`, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n};\n\nexport const fetchDestinations = async (token, countryId) => {\n    try {\n        // const token = localStorage.getItem('token')\n        const response = await fetch(`countries/${countryId}/destinations`, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n};\n\nexport const fetchCountries = async (token) => {\n\n    try{\n        // const token = localStorage.getItem('token')\n        const response = await fetch(`/countries`, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        const responseData = await response.json();\n        return responseData\n    } catch (error) {\n      console.log(error.message);\n    }\n}\n\nexport const fetchCountryInfo = async (token, countryId) => {\n\n    try{\n        const response = await fetch(`/countries/${countryId}`, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n}\n\nexport const addDestination = async (token, country, destinationId) => {\n\n    try{\n        const response = await fetch(`/countries/${country.id}/add_destination`, {\n            method: 'PATCH',\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({'destinationId': destinationId})\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n}\n\nexport const deleteDestination = async (token, country, destinationId) => {\n\n    try{\n        const response = await fetch(`/countries/${country.id}/delete_destination`, {\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({destinationId})\n        });\n        const responseData = await response.json();\n        return responseData\n\n    } catch (error) {\n      console.log(error.message);\n    }\n}","const rules = {\n  visitor: {\n    static: [\"get:countries\"]\n  },\n  // writer: {\n  //   static: [\n  //     \"posts:list\",\n  //     \"posts:create\",\n  //     \"users:getSelf\",\n  //     \"home-page:visit\",\n  //     \"dashboard-page:visit\"\n  //   ],\n  //   dynamic: {\n  //     \"posts:edit\": ({userId, postOwnerId}) => {\n  //       if (!userId || !postOwnerId) return false;\n  //       return userId === postOwnerId;\n  //     }\n  //   }\n  // },\n  admin: {\n    static: [\"delete:destination\", \"get:countries\", \"get:destinations\", \"get:user\", \"get:user_role\", \"post:destination\", \"post:user_preference\"\n    ]\n  }\n};\n\nexport default rules;","import rules from \"../rbac-rules\";\n\nconst check = (rules, role, action, data) => {\n\n    const permissions = rules[role];\n    if (!permissions) {\n        // role is not present in the rules\n        return false;\n    }\n\n    const staticPermissions = permissions.static;\n\n    if (staticPermissions && staticPermissions.includes(action)) {\n        // static rule not provided for action\n        return true;\n    }\n\n    const dynamicPermissions = permissions.dynamic;\n\n    if (dynamicPermissions) {\n        const permissionCondition = dynamicPermissions[action];\n        if (!permissionCondition) {\n            // dynamic rule not provided for action\n            return false;\n        }\n\n        return permissionCondition(data);\n    }\n    return false;\n};\n\nconst Can = props =>\n\n    check(rules, props.role, props.perform, props.data)\n        ? props.yes()\n        : props.no();\n\nCan.defaultProps = {\n    yes: () => null,\n    no: () => null\n};\n\n\nexport default Can;\n","import React, {useContext} from 'react'\nimport {Link} from 'react-router-dom'\nimport {AppStateContext} from \"../App\";\nimport Can from \"./Can\";\n\nconst ListDestinations = ({showDeleteButton, onDelete}) => {\n    const {userRole, destinations} = useContext(AppStateContext);\n\n    return (\n        <div>\n            {destinations.length !== 0 && (\n                <ol className='contact-list'>\n                    {destinations.map((country) => (\n                        <li key={country.id} className='destination-list-item'>\n                            {country.alias !== '' && (\n                                <div\n                                    className='destination-avatar'\n                                    style={{\n                                        backgroundImage: `url(https://www.countryflags.io/${country.alias.toLowerCase()}/shiny/64.png)`\n                                    }}\n                                ></div>\n                            )}\n                            <div className='destination-details'>\n                                <Link to={`/countries/${country.id}`}> {country.name} </Link>\n                            </div>\n                            {showDeleteButton && (\n                                <Can\n                                    role={userRole}\n                                    perform=\"delete:destination\"\n                                    yes={() => (\n                                        <button\n                                            onClick={() => onDelete(country.id)}\n                                            className='destination-remove'\n                                        >\n                                            Remove\n                                        </button>\n                                    )}\n                                    no={() => (null)}\n                                />\n                            )}\n                        </li>\n                    ))}\n                </ol>\n            )}\n\n        </div>\n    );\n}\n\nListDestinations.propTypes = {\n    // destinations: PropTypes.array.isRequired,\n    // onDeleteDestination: PropTypes.func.isRequired,\n}\nexport default ListDestinations","import React, {useContext, useEffect, useState} from \"react\";\nimport {useAuth0} from \"@auth0/auth0-react\";\nimport {addUserCountryPreference, fetchCountries} from \"./API\";\nimport {AppStateContext} from \"../App\";\n\nexport default function SelectCountry({onSubmit}) {\n    const {user, isAuthenticated, getAccessTokenSilently} = useAuth0();\n    const {countryId, setCountryId, selectedCountryId, setSelectedCountryId} = useContext(AppStateContext);\n    const [countries, setCountries] = useState([]);\n    const [isSubmitted, setIsSubmitted] = useState(false);\n\n    useEffect(() => {\n        async function getData() {\n            const token = await getAccessTokenSilently();\n            const {countries} = await fetchCountries(token);\n            setCountries(countries);\n        }\n        getData()\n    }, [getAccessTokenSilently]);\n\n    useEffect( () => {\n        if(isSubmitted){\n            setCountryId(selectedCountryId)\n            setIsSubmitted(false)\n        }\n    }, [isSubmitted])\n\n    const handleOnSubmit = async (event) => {\n        event.preventDefault()\n        const token = await getAccessTokenSilently();\n        const {new_user} = await addUserCountryPreference(token, user, selectedCountryId);\n        setIsSubmitted(true)\n    }\n\n    return (\n        isAuthenticated && (\n            <form onSubmit={onSubmit || handleOnSubmit}>\n                <label>\n                    <select value={selectedCountryId} onChange={(event) => (setSelectedCountryId(event.target.value))}>\n                        {countries.map(country => (\n                            <option key={country.id} value={country.id}> {country.name} </option>\n                        ))}\n                    </select>\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>\n            </form>\n        )\n    );\n\n};\n","import React, {useEffect, useState} from \"react\";\nimport {fetchCountryInfo, fetchDailyCasesByCountry} from \"./API\";\n\nexport default function CovidCaseData({country}) {\n\n    const [newConfirmed, setNewConfirmed] = useState(0)\n    const [newDeaths, setNewDeaths] = useState(0)\n    const [newRecovered, setNewRecovered] = useState(0)\n    const [isLoaded, setIsLoaded] = useState(false)\n\n    useEffect(() => {\n\n        async function getCOVIDInfo() {\n            if (country) {\n                const data = await fetchDailyCasesByCountry(country)\n                const arr = data.Countries.filter(d => d.CountryCode === country.alias);\n                setNewConfirmed(arr[0].NewConfirmed)\n                setNewDeaths(arr[0].NewDeaths)\n                setNewRecovered(arr[0].NewRecovered)\n                setIsLoaded(true)\n            }\n        }\n        getCOVIDInfo()\n    }, [country]);\n\n    return (\n        isLoaded ? (\n                <div>\n                    <p>New Confirmed: {newConfirmed}</p>\n                    <p>New Deaths: {newDeaths}</p>\n                    <p>New Recovered: {newRecovered}</p>\n                </div>\n            )\n            :\n            (\"Loading case data...\")\n    );\n};\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {fetchCountryInfo} from \"./API\";\nimport {useAuth0} from \"@auth0/auth0-react\";\nimport ListDestinations from \"./ListDestinations\";\nimport SelectCountry from \"./SelectCountry\";\nimport {addDestination, deleteDestination} from './API';\nimport {AppStateContext} from \"../App\";\nimport CovidCaseData from \"./CovidCaseData\";\nimport Can from \"./Can\";\n\nexport default function CountryPage() {\n    const {destination_id} = useParams();\n    const {userRole, countryId, setDestinations, selectedCountryId, setSelectedCountryId} = useContext(AppStateContext);\n    const {getAccessTokenSilently} = useAuth0();\n    const [country, setCountry] = useState(null);\n\n    const handleOnDeleteDestination = async (destinationId) => {\n        const token = await getAccessTokenSilently();\n        const {destinations} = await deleteDestination(token, country, destinationId);\n        setDestinations(destinations);\n    }\n\n    const addDestinationToCountry = async (event) => {\n        event.preventDefault();\n        const token = await getAccessTokenSilently();\n        const {destinations} = await addDestination(token, country, selectedCountryId);\n        setDestinations(destinations)\n    }\n\n    useEffect(() => {\n        async function getCountryData() {\n            const token = await getAccessTokenSilently();\n            const {country} = await fetchCountryInfo(token, destination_id)\n            setCountry(country);\n            setDestinations(country.destinations)\n        }\n\n        getCountryData()\n    }, [destination_id, getAccessTokenSilently, setDestinations]);\n\n    return (\n        !country ? (<p>Loading...</p>) : (\n            <div>\n                <div>\n                    <div\n                        className='destination-avatar'\n                        style={{\n                            backgroundImage: `url(https://www.countryflags.io/${country.alias.toLowerCase()}/shiny/64.png)`\n                        }}\n                    >\n                    </div>\n                    <div className='destination-details'>\n                        <h2>{country.name}</h2>\n                        <h3>{country.alias}</h3>\n                        <CovidCaseData country={country}/>\n                        <h3>Who can enter {country.name}?</h3>\n                        <ListDestinations\n                            showDeleteButton={true}\n                            onDelete={handleOnDeleteDestination}/>\n                    </div>\n                    <Link\n                        to='/'\n                        className='close-add-destination'>\n                        back\n                    </Link>\n                    <Can\n                        role={userRole}\n                        perform=\"post:destination\"\n                        yes={() => (\n                            <div>\n                                <p>Add a new destination</p>\n                                <SelectCountry onSubmit={addDestinationToCountry}/>\n                            </div>\n                        )}\n                        no={()=>(null)}\n                    />\n\n                </div>\n            </div>\n        )\n    );\n\n};\n","import React from \"react\";\nimport {useAuth0} from \"@auth0/auth0-react\";\n\nexport default function LoginButton(props) {\n    const {loginWithRedirect, isAuthenticated} = useAuth0();\n\n    return !isAuthenticated && (\n        <button className=\"LoginButton\" onClick={loginWithRedirect}>\n            Log In\n        </button>\n    );\n};\n\n","import React from \"react\";\nimport LoginButton from \"./LoginButton\";\n\nexport default function LoginPage() {\n\n    return (\n        <div>\n            <p>Please log in</p>\n            <LoginButton/>\n        </div>\n    );\n};\n","import React, {useContext, useEffect, useState} from \"react\";\nimport SelectCountry from \"./SelectCountry\";\nimport ListDestinations from \"./ListDestinations\";\nimport {addUserCountryPreference, fetchCountryOfUser, fetchDestinations} from \"./API\";\nimport {useAuth0} from \"@auth0/auth0-react\";\nimport {AppStateContext} from \"../App\";\n\nexport default function UserPage() {\n\n    const {countryId, setCountryId, setDestinations} = useContext(AppStateContext);\n    const {user, getAccessTokenSilently} = useAuth0();\n    const [gotDestinationsData, setGotDestinationsData] = useState(false)\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [gotUserCountryReference, setGotUserCountryReference] = useState(false)\n\n    // const handleAddUserCountryPreference = async (event) => {\n    //     event.preventDefault();\n    //     const token = await getAccessTokenSilently();\n    //     const {new_user} = await addUserCountryPreference(token, user, countryId);\n    //     // setGotUserCountryReference(true)\n    //     // setCountryId(selectedCountryId)\n    // }\n\n    useEffect(() => {\n        const getUserCountryPreference = async () => {\n            const token = await getAccessTokenSilently();\n            const {country_id} = await fetchCountryOfUser(token, user.sub);\n            if (country_id) {\n                setCountryId(country_id)\n                // setGotUserCountryReference(true)\n            }\n            setIsLoaded(true)\n        }\n        getUserCountryPreference() //can't await cause useEffect is not an async function\n    }, [])\n\n    useEffect(() => {\n        async function getDestinations() {\n            const token = await getAccessTokenSilently();\n            const {destinations} = await fetchDestinations(token, countryId, setDestinations);\n            setDestinations(destinations);\n        }\n\n        if (countryId) {\n            getDestinations()\n            setGotDestinationsData(true)\n        }\n    }, [countryId])\n\n    return (\n        <div>\n            {isLoaded ?\n            <div>\n                <p>Select your country:</p>\n                <SelectCountry/>\n            </div>\n                 :\n                <p>Loading...</p>}\n            {gotDestinationsData ?\n                <ListDestinations showDeleteButton={false}/>\n                :\n                (null)}\n        </div>\n        // isLoaded ? (gotDestinationsData ? <ListDestinations showDeleteButton={false}/> :\n        //     <SelectCountry onSubmit={handleAddUserCountryPreference}/>) : <p>Loading...</p>\n    );\n};\n\n","import React, {useEffect, useState} from \"react\";\nimport {useAuth0} from \"@auth0/auth0-react\";\nimport {fetchCountries} from \"./API\";\nimport {Link} from \"react-router-dom\";\n\nexport default function ListCountries({}) {\n    const {isAuthenticated, getAccessTokenSilently} = useAuth0();\n    const [countries, setCountries] = useState([]);\n    const [query, setQuery] = useState('');\n\n    const updateQuery = (query) => {\n        setQuery(query.trim())\n    }\n\n    const clearQuery = () => {\n        updateQuery('')\n    }\n\n    const showingCountries = query === ''\n        ? countries\n        : countries.filter((c) => (\n            c.name.toLowerCase().includes(query.toLowerCase())\n        ))\n\n    useEffect(() => {\n        async function getData() {\n            const token = await getAccessTokenSilently();\n            const {countries} = await fetchCountries(token);\n            setCountries(countries);\n        }\n\n        getData()\n    }, [getAccessTokenSilently]);\n\n    return (\n\n        isAuthenticated && (\n            <div>\n                <div className='list-countries-top'>\n                    <input\n                        className='search-countries'\n                        type='text'\n                        placeholder='Search Country'\n                        value={query}\n                        onChange={(event) => setQuery(event.target.value)}\n                    />\n                </div>\n\n                {showingCountries.length !== countries.length && (\n                    <div className='showing-countries'>\n                        <span>Now showing {showingCountries.length} of {countries.length}</span>\n                        <button onClick={clearQuery}>Show all</button>\n                    </div>\n                )}\n\n                <ol className='country-list'>\n                    {showingCountries.map((country) => (\n                        <li key={country.id} className='destination-list-item'>\n                            {country.alias !== '' && (\n                                <div\n                                    className='destination-avatar'\n                                    style={{\n                                        backgroundImage: `url(https://www.countryflags.io/${country.alias.toLowerCase()}/shiny/64.png)`\n                                    }}\n                                ></div>\n                            )}\n                            <div className='destination-details'>\n                                <Link to={`/countries/${country.id}`}> {country.name} </Link>\n                            </div>\n                        </li>\n                    ))}\n                </ol>\n            </div>\n        )\n    )\n        ;\n\n};\n","import React, {createContext, useEffect, useState} from 'react';\nimport {Link, Route} from 'react-router-dom'\nimport {useAuth0} from \"@auth0/auth0-react\";\nimport CountryPage from \"./components/CountryPage\";\nimport LoginPage from \"./components/LoginPage\";\nimport SelectCountry from \"./components/SelectCountry\";\nimport UserPage from \"./components/UserPage\";\nimport {fetchUserRole} from \"./components/API\";\nimport ListCountries from \"./components/ListCountries\";\n\nexport const AppStateContext = createContext({})\n\nfunction App() {\n\n    const {user, isAuthenticated, getAccessTokenSilently} = useAuth0();\n    const [destinations, setDestinations] = useState([]);\n    const [countryId, setCountryId] = useState(null);\n    const [selectedCountryId, setSelectedCountryId] = useState('');\n    const [userRole, setUserRole] = useState('');\n\n\n    useEffect(() => {\n        async function getUserRole() {\n            const token = await getAccessTokenSilently();\n            const {role} = await fetchUserRole(token, user.sub)\n            setUserRole(role)\n        }\n\n        if (isAuthenticated) {\n            getUserRole()\n        }\n    }, [isAuthenticated])\n\n    return (\n        <div>\n            <p>Hello world!</p>\n            <AppStateContext.Provider value={{\n                userRole,\n                countryId,\n                setCountryId,\n                setDestinations,\n                destinations,\n                user,\n                selectedCountryId,\n                setSelectedCountryId\n            }}>\n                <Route exact path='/' render={() => {\n                    return (\n                        <div>\n                            {!isAuthenticated ?\n                                <LoginPage/>\n                                :\n                                <div>\n                                    <Link to='/countries'>countries</Link>\n                                    <UserPage/>\n                                </div>}\n                        </div>\n                    );\n                }}/>\n                <Route exact path='/login' component={LoginPage}/>\n                <Route exact path='/select-country' component={SelectCountry}/>\n                <Route path='/countries/:destination_id' component={CountryPage}/>\n                <Route exact path='/countries' component={ListCountries}/>\n            </AppStateContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nconst domain = process.env.REACT_APP_AUTH_0_DOMAIN;\nconst clientId = process.env.REACT_APP_AUTH_0_CLIENT_ID;\n\nReactDOM.render(\n\n  <BrowserRouter>\n      <Auth0Provider\n          domain={domain}\n          clientId={clientId}\n          redirectUri={window.location.origin}\n          audience='myApi'\n          callbackUrl='http://localhost:3000/callback'\n      >\n          <App />\n      </Auth0Provider>\n  </BrowserRouter>, document.getElementById('root')\n\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// domain=\"dev-j7mi52gx.eu.auth0.com\"\n    // clientId=\"ZZlb6ph1nmJIjdFtk5kDShQ1UiP3bAcZ\"\n    // redirectUri=\"https://localhost:3000\"\n"],"sourceRoot":""}